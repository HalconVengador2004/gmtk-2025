[gd_scene load_steps=2 format=3 uid="uid://dii7qi13k27ui"]

[sub_resource type="GDScript" id="GDScript_k1rmj"]
script/source = "extends Node2D

@export var speed := 200.0

var selected := false
var path := []
var path_index := 0
var nav : Navigation2D

func _ready():
	# Get Navigation2D node somewhere in the scene (adjust path)
	nav = get_tree().root.get_node(\"root/Navigation2D\")  # Change to your actual Navigation2D node path

func _input(event):
	if event is InputEventMouseButton:
		var mouse_pos = get_global_mouse_position()
		if event.button_index == MouseButton.LEFT and event.pressed:
			# Check if parent clicked
			if is_parent_clicked(mouse_pos):
				selected = true
			else:
				selected = false
		
		elif event.button_index == MouseButton.RIGHT and event.pressed and selected:
			# Request path to clicked location
			var parent = get_parent() as CharacterBody2D
			path = nav.get_simple_path(parent.global_position, mouse_pos, optimize=true)
			path_index = 0

func is_parent_clicked(pos: Vector2) -> bool:
	# Basic bounding box check using parent's collision shape or position
	var parent = get_parent() as CharacterBody2D
	var parent_pos = parent.global_position
	# Assuming a 32x32 clickable area centered on parent
	var rect = Rect2(parent_pos - Vector2(16,16), Vector2(32,32))
	return rect.has_point(pos)

func _process(delta):
	if path.size() > 0 and path_index < path.size():
		var parent = get_parent() as CharacterBody2D
		var target_pos = path[path_index]
		var direction = (target_pos - parent.global_position)
		var distance = direction.length()
		
		if distance < speed * delta:
			# Reached current path point, go to next
			parent.global_position = target_pos
			path_index += 1
		else:
			direction = direction.normalized()
			parent.global_position += direction * speed * delta
"

[node name="ControlableComponent" type="Node"]
script = SubResource("GDScript_k1rmj")
speed = null
